Python Crash Course Notes

Naming convention:
- variables: lowercase, must begin with underscore or letter, labels assigned to values
- constants: all caps

Variable types:
- string: series of characters inside quotation marks ("" or '' where choice based on whether ' or " used within string)
	- f-string: use f"{}" to insert variable into string, can type in strings and use methods, previously format() method
- integer: use _ to improve readability
- float: given in any operation involving a float or division, use _ to improve 

Lists: 
- collection of items in a particular order
- example_list = [x, y]
- index: starts at 0, -1 is last, example_list[0].title() to access item and change capitalisation
- slicing: use list[index1:index2:step] to get a portion of the list, use list[:] to copy full list (lists not separate if simply equated!)

Tuples:
- immutable lists
- example_tuple = (x, y) and defined by commas so must always include a comma (even if one element only)
- use standard index notation []

Dictionaries:
- collections of key-value pairs where any object in python can be a value
- example_dictionary = {'att1': 'value1', 'att2':, 'value2'}
- to access a value: dictionary[key]
- to add or modify a key-value pair: dictionary[key] = value
- order of key-value pairs retained

Nesting:
- storing dictionaries in a list, or storing a list in a dictionary, or storing a dictionary in a dictionary
- avoid nesting too deeply

Sets:
- collection of items in which each item is unique
- example_set = {'a', 'b', 'c'}
- example_set = set(list)
- items not retained in a specific order
- if repeat placed into a set, repeat is ignored and removed

Methods:
- actions python performs on a piece of data
- variable.method()
- .title(), .lower(), .upper() to change case
- .rstrip(), .lstrip(), .strip() to remove whitespace around string
- .append(value), .insert(index, value), .pop(index), .remove(value) to edit lists where remove(value) only removes first occurence
- .sort(reverse=), .reverse() to permanently organise lists
- .get(key, optional value) to get dictionary values if key may not exist
- .items(), .keys(), .values() to return list of key-value pairs, keys and values in a dictionary, used with loops where .keys() is default

Functions:
- del(obj_name) to delete an object (incl. dictionary key-value pairs, list items)
- sorted(list, reverse=) to temporarily sort lists alphabetically or numerically
- range(first value, final value+1, step) in for loops, stops at final value so never prints it, range(6) gives 0-5
- list() to create lists, e.g. list(range(5))
- min(list) to give smallest value
- max(list) to give largest value
- sum(list) to give sum of all values
- set(list) to give a unique collection of values in list
- input(prompt) to obtain user input in string format
- int(string) to convert a string to numerical format
- break to exit any loop immediately
- continue to skip rest of while loop and go back to the start

Formatting:
- \t for tab
- \n for new line

Conditional tests (Boolean expressions):
- = for assigning
- == for checking equality (equality operator)
- != for checking inequality
- <, <=, >, >= for mathematical comparisons
- in for checking whether value in a list
- not in for checking whether value not in a list

Other:
- multiple assignment: e.g. x, y, z = 0, 0, 0
- modulo operator: returns remainder, e.g. 4 % 3 returns 1
- += operator is equivalent to x = x + a

Loops:
- for loop: use : and indentation
	- dictionaries: for key, value, in sorted/set(dictionary.items()/keys()/values()):
- list comprehension allows to create lists in one line, [expression for loop] e.g. squares = [value**2 for value in range(1,11)]
- if loop: use : and indentation
	- uses conditional tests (True or False)
	- case sensitive, use item.lower() == 'x' for testing
	- and / or for checking for multiple conditions
	- if, elif, else, run multiple if statements if each test needs to be evaluated / acted on
	- if list: checks if list is empty or if not list: checks if list is not empty
- while loop: use : and indentation
	- runs while a condition is True
	- flag: set to True when multiple conditions are all live, so while loop only checks if flag is True (not each condition)
	- break statement: exits while loop immediately, used with while True: loops
	- continue statement: skips rest of loop and goes back to the start
	- ctrl+C to exit infinite loop

Types of errors:
- indentation
- logical
- syntax
- type e.g. when trying to change value in a tuple, or compare a string to an integer
- key